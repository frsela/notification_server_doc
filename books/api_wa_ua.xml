<?xml version="1.0" encoding="utf-8"?>
<section xml:id="api_wa_ua"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      version="5.0" xml:lang="en">

  <title>API between WebApp and the User Agent</title>
  <para>
    This API is mainly based on the W3C draft as specified in
    <link xlink:href="http://dvcs.w3.org/hg/push/raw-file/default/index.html">
      [http://dvcs.w3.org/hg/push/raw-file/default/index.html]
    </link>
  </para>
  <para>
    Also there is more information about Simple PUSH API here:
    <link xlink:href="https://wiki.mozilla.org/WebAPI/SimplePush">
      [https://wiki.mozilla.org/WebAPI/SimplePush]
    </link>
  </para>
  <para>
    With this API the application is able to register notification
    channels itself into the Notification Server and recover the public URL
    to be used as the notification endpointURL by his Application Server (AS).
  </para>
  <para>
    This API (under the navigator.pushNotification object) defines these methods:
    <itemizedlist>
      <listitem>
        register
      </listitem>
      <listitem>
        unregister
      </listitem>
      <listitem>
        registrations
      </listitem>
    </itemizedlist>
    <section>
      <title>navigator.pushNotification.register</title>
      <para>
        This method allows the application to register a new channel.
        <programlisting language="javascript">
        <![CDATA[
        navigator.pushNotification.register()
        ]]>
        </programlisting>
      </para>
      <para>
        Finally this method will response asynchronously with the URL to be
        sent to the AS in order to be able to send notifications.
      </para>
      <programlisting languange="javascript">
        <![CDATA[
        var req = navigator.pushNotification.register();
        req.onsuccess = function(e) {
          alert("Received URL: " + req.result.pushEndpoint);
        };
        req.onerror = function(e) {
          alert("Error registering app");
        }
        ]]>
      </programlisting>
    </section>

    <section>
      <title>navigator.pushNotification.unregister</title>
      <para>
        This method allows the application to unregister a previously registered
        channel.
      </para>
      <programlisting languange="javascript">
        <![CDATA[
        navigator.pushNotification.unregister(endPointURL);
        ]]>
      </programlisting>
    </section>
  </para>
  <para>
    After register the application into the Notification Server, all received
    notification through the given URL will be delivered to the WA registered
    channel.
  </para>
  <para>
    Since the notifications will be received by the UA it's needed a way to
    notify each application. The current specification is using the new
    System Messages infrastructure defined in FirefoxOS.
  </para>
  <para>
    In this case, the application shall register to the "push-notification"
    event handler:
    <programlisting language="javascript">
    <![CDATA[
    navigator.mozSetMessageHandler("push", function(msg) {
      alert("New Message with body: " + JSON.stringify(msg));
    });
    ]]>
    </programlisting>
  </para>
  <para>
    Inside the msg you'll receive the pushEndpoint URL so an app can register
    as many channels as it wants and with this attribute has a chance to
    differenciate one from another.
  </para>
  <para>
    The complete example:
    <programlisting languange="javascript">
      <![CDATA[
        var emailEndpoint, imEndpoint;

        // The user has logged in, now's a good time to register the channels
        MyAppFramework.addEventListener('user-login', function() {
          setupAppRegistrations();
        });

        function setupAppRegistrations() {
         // Issue a register() call
         // to register to listen for a notification,
         // you simply call push.register
         // Here, we'll register a channel for "email" updates.
         // Channels can be for anything the app would like to get notifications for.
         var reqEmail = navigator.pushNotification.register();
         reqEmail.onsuccess = function(e) {
           emailEndpoint = e.target.result.pushEndpoint;
           storeOnAppServer("email", emailEndpoint); // This is the "Hand wavey" way that the App 
                                                     // sends the endPoint back to the AppServer
         }

         // We'll also register a second channel for "im", because we're social and all about the socialists. Or something.
         var reqIm = navigator.pushNotification.register();
         reqIm.onsuccess = function(e) {
           imEndpoint = e.target.result.pushEndpoint;
           storeOnAppServer("im", imEndpoint);
         }
        }

        // Once we've registered, the AppServer can send version pings to the EndPoint.
        // This will trigger a 'push' message to be sent to this handler.
        navigator.mozSetMessageHandler('push', function handlePushMessage(message) {
          if (message.pushEndpoint == emailEndpoint)   // Yay! New Email! Steve and blue can dance!
            getNewEmailMessagesFromAppServer(message.version);
          else if (message.pushEndpoint == imEndpoint) // Yay! An IM awaits. I wonder if it's Sam's IM?
            getNewChatMessagesFromAppServer();
        });

        // to unregister, you simply call..
        AppFramework.addEventListener('user-logout', function() {
          navigator.pushNotification.unregister(emailEndpoint);
          navigator.pushNotification.unregister(imEndpoint);
        });
      ]]>
    </programlisting>
  </para>
</section>
